diff -Nru -x /debian/ eina-0.12.0.orig//eina/art/eina-art.c eina-0.12.0/eina/art/eina-art.c
--- eina-0.12.0.orig//eina/art/eina-art.c	2011-07-09 16:18:58.000000000 +0200
+++ eina-0.12.0/eina/art/eina-art.c	2011-09-12 19:35:15.279607736 +0200
@@ -54,8 +54,14 @@
 
 #define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), EINA_TYPE_ART, EinaArtPrivate))
 
+#define DEBUG 0
 #define DEBUG_PREFIX "EinaArt"
+
+#if DEBUG
 #define debug(...) g_debug(DEBUG_PREFIX" "__VA_ARGS__)
+#else
+#define debug(...) ;
+#endif
 
 typedef struct _EinaArtPrivate EinaArtPrivate;
 struct _EinaArtClassPrivate {
diff -Nru -x /debian/ eina-0.12.0.orig//eina/art/eina-art-plugin.c eina-0.12.0/eina/art/eina-art-plugin.c
--- eina-0.12.0.orig//eina/art/eina-art-plugin.c	2011-09-10 13:43:50.000000000 +0200
+++ eina-0.12.0/eina/art/eina-art-plugin.c	2011-09-12 19:34:34.308884492 +0200
@@ -21,7 +21,7 @@
 #include "eina-art-test-backends.h"
 #include <eina/lomo/eina-lomo-plugin.h>
 
-#define DEBUG 1
+#define DEBUG 0
 #define PREFIX "EinaArtPlugin"
 
 #if DEBUG
diff -Nru -x /debian/ eina-0.12.0.orig//eina/art/eina-art-search.c eina-0.12.0/eina/art/eina-art-search.c
--- eina-0.12.0.orig//eina/art/eina-art-search.c	2011-07-09 16:18:58.000000000 +0200
+++ eina-0.12.0/eina/art/eina-art-search.c	2011-09-12 19:35:47.900183781 +0200
@@ -26,8 +26,14 @@
 
 #define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), EINA_TYPE_ART_SEARCH, EinaArtSearchPrivate))
 
+#define DEBUG 0
 #define DEBUG_PREFIX "EinaArtSearch"
-#define debug(...) g_debug(DEBUG_PREFIX" "__VA_ARGS__)
+
+#if DEBUG
+#	define debug(...) g_debug(DEBUG_PREFIX" "__VA_ARGS__)
+#else
+#	define debug(...) ;
+#endif
 
 typedef struct _EinaArtSearchPrivate EinaArtSearchPrivate;
 
@@ -370,7 +376,7 @@
  * eina_art_search_run_callback:
  * @search: An #EinaArtSearch
  *
- * Runs the callback associated with @search 
+ * Runs the callback associated with @search
  */
 void
 eina_art_search_run_callback(EinaArtSearch *search)
diff -Nru -x /debian/ eina-0.12.0.orig//eina/art/eina-art-test-backends.c eina-0.12.0/eina/art/eina-art-test-backends.c
--- eina-0.12.0.orig//eina/art/eina-art-test-backends.c	2011-07-29 13:14:35.000000000 +0200
+++ eina-0.12.0/eina/art/eina-art-test-backends.c	2011-09-12 19:35:55.140311657 +0200
@@ -56,7 +56,7 @@
 {
 	// Create regexes
 	if (_infolder_regexes[0] == NULL)
-	{	
+	{
 		for (guint i = 0; _infolder_regexes_str[i] != NULL; i++)
 		{
 			GError *error = NULL;
diff -Nru -x /debian/ eina-0.12.0.orig//lomo/lomo-player.c eina-0.12.0/lomo/lomo-player.c
--- eina-0.12.0.orig//lomo/lomo-player.c	2011-09-10 13:57:19.000000000 +0200
+++ eina-0.12.0/lomo/lomo-player.c	2011-09-12 19:37:38.472137682 +0200
@@ -7,6 +7,15 @@
 #include "lomo/lomo-logger.h"
 #include "lomo-marshallers.h"
 
+#define DEBUG 0
+#define DEBUG_PREFIX "LomoPlayer"
+
+#if DEBUG
+#	define debug(...) g_debug(DEBUG_PREFIX " " __VA_ARGS__)
+#else
+#	define debug(...) ;
+#endif
+
 G_DEFINE_TYPE (LomoPlayer, lomo_player, G_TYPE_OBJECT)
 
 struct _LomoPlayerPrivate {
@@ -1181,10 +1190,10 @@
 	// Check if new index is -1 and delete everything
 	if (index == -1)
 	{
-		g_debug("Going to -1...");
+		debug("Going to -1...");
 		if (priv->pipeline != NULL)
 		{
-			g_debug("  nuking pipeline");
+			debug("  nuking pipeline");
 			lomo_player_set_state(self, LOMO_STATE_STOP, NULL);
 			priv->vtable.set_state(priv->pipeline, GST_STATE_NULL);
 			g_object_unref(priv->pipeline);
@@ -1200,13 +1209,13 @@
 		return TRUE;
 	}
 
-	g_debug("Going to %d...", index);
+	debug("Going to %d...", index);
 
 	// Check stream, this should never happend
 	LomoStream *stream = lomo_player_get_nth_stream(self, index);
 	if (!LOMO_IS_STREAM(stream))
 	{
-		g_debug("  stream is fucked, reboot _set_current");
+		debug("  stream is fucked, reboot _set_current");
 		g_warn_if_fail(LOMO_IS_STREAM(stream));
 		lomo_player_set_current(self, -1, NULL);
 		return FALSE;
@@ -1234,7 +1243,7 @@
 		// Wipe it
 		if (priv->pipeline)
 		{
-			g_debug("Old pipeline is going to be wiped");
+			debug("Old pipeline is going to be wiped");
 			check_method_or_warn(self, set_state);
 			if (priv->vtable.set_state)
 				priv->vtable.set_state(priv->pipeline, GST_STATE_NULL);
@@ -1242,7 +1251,7 @@
 		}
 
 		// Assume new pipeline
-		g_debug("new pipeline is assumed and default values assigned");
+		debug("new pipeline is assumed and default values assigned");
 		priv->pipeline = new_pipeline;
 		lomo_player_set_volume(self, -1);         // Restore pipeline volume
 		lomo_player_set_mute  (self, priv->mute); // Restore pipeline mute
@@ -1272,7 +1281,7 @@
 	if (queue_index >= 0)
 		lomo_player_dequeue(self, queue_index);
 
-	g_debug("Everything ok, fire notifies");
+	debug("Everything ok, fire notifies");
 	LomoState lomo_state = LOMO_STATE_STOP;
 	if (lomo_state_from_gst(state, &lomo_state))
 		player_set_shadow_state(self, lomo_state);
@@ -2293,19 +2302,19 @@
 		q = g_quark_from_static_string("uri");
 	if (q == field_id)
 	{
-		g_debug("Got URI");
+		debug("Got URI");
 		gint64 pos = lomo_player_get_position(self);
 		gint64 len =  lomo_player_get_length(self);
 		gint64 b;
 		g_object_get(self->priv->pipeline, "buffer-duration", &b, NULL);
-		g_debug("Pos.: %"G_GINT64_FORMAT", len: %"G_GINT64_FORMAT"", len, pos);
+		debug("Pos.: %"G_GINT64_FORMAT", len: %"G_GINT64_FORMAT"", len, pos);
 		pos += b;
-		g_debug("Pos.: %"G_GINT64_FORMAT", len: %"G_GINT64_FORMAT"", len, pos);
+		debug("Pos.: %"G_GINT64_FORMAT", len: %"G_GINT64_FORMAT"", len, pos);
 		return FALSE;
 	}
 	/*
 	gchar *v =   g_strdup_value_contents(value);
-	g_debug("  %s: %s", g_quark_to_string(field_id), v);
+	debug("  %s: %s", g_quark_to_string(field_id), v);
 	g_free(v);
 	*/
 	return TRUE;
@@ -2320,7 +2329,7 @@
 	gint64 bsize;
 	g_object_get(self->priv->pipeline, "buffer-duration", &bsize, NULL);
 
-	g_debug(" Current diff: %"G_GINT64_FORMAT" milisecs, buffer len: %"G_GINT64_FORMAT"", len - pos, bsize);
+	debug(" Current diff: %"G_GINT64_FORMAT" milisecs, buffer len: %"G_GINT64_FORMAT"", len - pos, bsize);
 }
 #endif
 
@@ -2335,7 +2344,7 @@
 	LomoPlayerPrivate *priv = self->priv;
 
 	/*
-	g_debug("Got msg %s", GST_MESSAGE_TYPE_NAME(message));
+	debug("Got msg %s", GST_MESSAGE_TYPE_NAME(message));
 	print_stats(self);
 
 	if (message->structure)
@@ -2468,7 +2477,7 @@
 		case GST_MESSAGE_ANY:
 			break;
 		default:
-			g_debug(_("Bus got something like... '%s'"), gst_message_type_get_name(GST_MESSAGE_TYPE(message)));
+			debug(_("Bus got something like... '%s'"), gst_message_type_get_name(GST_MESSAGE_TYPE(message)));
 			break;
 		}
 
@@ -2480,7 +2489,7 @@
 {
 	LomoPlayerPrivate *priv = self->priv;
 
-	// g_debug("Got about-to-finish");
+	// debug("Got about-to-finish");
 	// print_stats(self);
 	gint next = lomo_player_get_next(self);
 	if (next < 0)
diff -Nru -x /debian/ eina-0.12.0.orig//lomo/lomo-stats.c eina-0.12.0/lomo/lomo-stats.c
--- eina-0.12.0.orig//lomo/lomo-stats.c	2011-07-09 16:18:58.000000000 +0200
+++ eina-0.12.0/lomo/lomo-stats.c	2011-09-12 19:38:54.223477428 +0200
@@ -30,6 +30,15 @@
 #include <glib/gi18n.h>
 #include "lomo.h"
 
+#define DEBUG 0
+#define DEBUG_PREFIX "LomoStats "
+
+#if DEBUG
+#	define debug(...) g_debug(DEBUG_PREFIX __VA_ARGS__)
+#else
+#	define debug(...) ;
+#endif
+
 struct _LomoStats {
 	LomoPlayer *player;
 
@@ -39,9 +48,6 @@
 	gboolean    submit;
 };
 
-#define DEBUG_PREFIX "LomoStats "
-#define debug(...)   g_debug(DEBUG_PREFIX __VA_ARGS__)
-
 static void
 stats_destroy_real(LomoStats *self, gboolean player_is_active);
 static void
diff -Nru -x /debian/ eina-0.12.0.orig//lomo/lomo-stream.c eina-0.12.0/lomo/lomo-stream.c
--- eina-0.12.0.orig//lomo/lomo-stream.c	2011-07-09 16:18:58.000000000 +0200
+++ eina-0.12.0/lomo/lomo-stream.c	2011-09-12 19:38:03.652582924 +0200
@@ -103,7 +103,7 @@
  * @uri: An uri to create a #LomoStream from.
  *
  * Create a new #LomoStream from an uri
- * 
+ *
  * Returns: A new #LomoStream
  */
 LomoStream*
@@ -113,7 +113,7 @@
 	gint i;
 
 	g_warn_if_fail(uri != NULL);
-	
+
 	if (uri)
 	{
 		// Check valid URI, more strict methods than this: g_uri_parse_scheme
@@ -370,7 +370,7 @@
 GType
 lomo_tag_get_gtype(const gchar *tag)
 {
-	if (g_str_equal(tag, "uri")) 
+	if (g_str_equal(tag, "uri"))
 		return G_TYPE_STRING;
 	return gst_tag_get_type(tag);
 }

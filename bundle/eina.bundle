<?xml version="1.0" standalone="no"?> <!--*- mode: xml -*-->
<app-bundle>

  <meta>
    <!-- Where to pick up the GTK+ installation, icon themes,
         etc. Note that "${env:JHBUILD_PREFIX}" is evaluated to the
         value of the environment variable JHBUILD_PREFIX. You can
         define additional prefixes and refer to them in paths
         throughout this file on the form "${prefix:name}". This is
         useful for installing certain libraries or even the
         application itself separately. Note that JHBUILD_PREFIX is
         defined by jhbuild, so it you are not using jhbuild you can
         either define your own or just hardcode the path here.
    -->
    <prefix name="default">/opt/local</prefix>

    <!-- The project directory is the default location of the created
         app. If you leave out the path, the current directory is
         used. Note the usage of an environment variable here again.
    -->
    <destination overwrite="yes">${project}/</destination>

    <image>
      <!-- Not implemented yet (DMG image). -->
    </image>

    <!-- Optionally specify a launcher script to use. If the
         application sets up everything needed itself, like
         environment variable, linker paths, etc, a launcher script is
         not needed. If the source path is left out, the default
         script will be used.
    -->
    <!--launcher-script>${project}/run-local.sh</launcher-script-->

    <!-- Not implemented: Optional runtime, could be python or mono
         for example.
    -->
    <!--runtime copy="yes">/usr/bin/python</runtime-->
  </meta>

  <!-- The special macro "${project}" refers to the directory where
       this bundle file is located. The application name and bundle
       identifier are taken from the plist file.
  -->
  <plist>${project}/Info.plist</plist>

  <main-binary>${prefix}/bin/eina</main-binary>

  <!-- Copy in GTK+ modules. Note the use of the
       "${pkg:module:variable}" macro, which evaluates to a pkg-config
       variable in the specified module. Note that any libraries that
       binaries link to are also copied in automatically.
  -->
  <binary>${prefix}/bin/gst-inspect-0.10</binary>
  <binary>${prefix}/bin/gst-launch-0.10</binary>
  <binary>${prefix}/bin/gdk-pixbuf-csource</binary>
  <binary>${prefix}/bin/gdk-pixbuf-query-loaders</binary>
  <binary>${prefix}/lib/gtk-2.0/${pkg:gtk+-2.0:gtk_binary_version}/loaders/*.so</binary>
  <binary>${prefix}/lib/gtk-2.0/${pkg:gtk+-2.0:gtk_binary_version}/engines/libclearlooks.so</binary>
  <!-- binary>${prefix}/lib/gio/modules/*.so</binary -->
  <binary>${prefix}/lib/pango/1.6.0/modules/*.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstcoreelements.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstosxaudio.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgsttypefindfunctions.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstplaybin.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstautodetect.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstdecodebin.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstid3demux.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstmad.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstogg.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstmpegaudioparse.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstaudioconvert.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstaudioresample.so</binary>
  <binary>${prefix}/lib/gstreamer-0.10/libgstvolume.so</binary>

  <binary>${prefix}/lib/eina/adb/*.so</binary>
  <binary>${prefix}/lib/eina/coverplus/*.so</binary>
  <binary>${prefix}/lib/eina/lastfm/*.so</binary>
  <binary>${prefix}/lib/eina/recently/*.so</binary>

  <!-- Data to copy in, usually Glade/UI files, images, sounds files
       etc. The destination inside the bundle can be specified if the
       files should end up at a different location, by using the
       "dest" property. The destination must then start with the macro
       "${bundle}", which refers to the bundle root directory.
  -->
  <data>
    ${prefix}/share/eina
  </data>
  <data>${prefix}/lib/eina/lastfm/*.png</data>
  <data>${prefix}/lib/eina/lastfm/*.ui</data>
  <data>${prefix}/lib/eina/lastfm/*.gif</data>
  <data>${prefix}/lib/eina/recently/*.ui</data>

  <data dest="${bundle}/Contents/Resources">
    ${project}/Eina.icns
  </data>

  <data dest="${bundle}/Contents/Resources/share/mime">
  	${prefix}/share/mime
  </data>

  <data dest="${bundle}/Contents/Resources/etc/gtk-2.0/gtkrc">
    ${prefix}/share/themes/Clearlooks/gtk-2.0/gtkrc
  </data>

  <data>${prefix}/etc/pango/pango.modules</data>

  <!-- Icon themes to copy. The "icons" property can be either of
       "auto", "all", or "none". All or none should be
       self-explanatory, while auto means that the script will try to
       figure out which icons are needed. This is done by getting all
       the strings from all copied binaries, and matching them against
       icon names. To be safe, you should use "all". "none" is useful
       if you want just the index.theme file but no icons, mostly
       needed for the "hicolor" base theme.
  -->
  <icon-theme icons="auto">
    Tango
  </icon-theme>

</app-bundle>
